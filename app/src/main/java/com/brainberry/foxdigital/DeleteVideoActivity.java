package com.brainberry.foxdigital;

import android.content.Context;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.*;
import com.squareup.picasso.Picasso;

import java.util.ArrayList;

/**
 * This activity is launched when menuItemDeleteVideo (Activity: Fox) is pressed.<br>
 * All uploaded videos will be listed here and the videos can be deleted by pressing the delete button
 *
 * @author Shayak Banerjee
 * @version 0.1
 * @since 3rd June 2019
 */
public class DeleteVideoActivity extends AppCompatActivity {

    private ArrayList<Video> videoList;
    private DeleteVideoListViewAdapter adapter;

    private FirebaseDatabase firebaseDatabase;
    private DatabaseReference databaseReference;
    private FirebaseAuth mAuth;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_delete_video);

        mAuth = FirebaseAuth.getInstance();

        firebaseDatabase = FirebaseDatabase.getInstance();
        databaseReference = firebaseDatabase.getReference("videos");

        videoList = new ArrayList<>();

        populateVideoList();

        ListView deleteVideoListView = findViewById(R.id.deleteVideoListView);
        adapter = new DeleteVideoListViewAdapter(this, videoList);
        deleteVideoListView.setAdapter(adapter);

    }

    // Only for testing purposes, remove after data is fetched from firebase
    private void loadTestData() {
        videoList.add(new Video("Longman", "http://i.imgur.com/DvpvklR.png", "thumbnailurl"));
        videoList.add(new Video("Shortman", "http://i.imgur.com/DvpvklR.png", "thumbnailurl"));
        videoList.add(new Video("Puppies", "http://i.imgur.com/DvpvklR.png", "thumbnailurl"));
        videoList.add(new Video("Salvation", "http://i.imgur.com/DvpvklR.png", "thumbnailurl"));
        videoList.add(new Video("Appleseed", "http://i.imgur.com/DvpvklR.png", "thumbnailurl"));
    }

    private class DeleteVideoListViewAdapter extends android.widget.BaseAdapter {

        ArrayList<Video> videoList;
        Context context;

        DeleteVideoListViewAdapter(Context context, ArrayList<Video> listOfVideos) {
            videoList = listOfVideos;
            this.context = context;
        }

        @Override
        public int getCount() {
            return videoList.size();
        }

        @Override
        public Object getItem(int position) {
            return videoList.get(position);
        }

        @Override
        public long getItemId(int position) {
            return (long) position;
        }

        @Override
        public View getView(final int position, View convertView, android.view.ViewGroup parent) {

            final Video video = videoList.get(position);
            LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            View videoCardView = inflater.inflate(R.layout.delete_video_activity_card, null);

            // Assigning data to the components of videoCardView
            ImageView imageViewThumbnail = videoCardView.findViewById(R.id.imageViewThumbnail);
            TextView textViewVideoTitle = videoCardView.findViewById(R.id.textViewVideoTitle);

            // video.link is the thumbnail image Uri
            Picasso.get().load(video.getLink()).into(imageViewThumbnail);
            textViewVideoTitle.setText(video.title);

            ImageView clickableImageViewDeleteButton = videoCardView.findViewById(R.id.clickableImageViewDeleteButton);
            clickableImageViewDeleteButton.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View l) {
                    buttonDeleteOnClick(video.id, position);
                }
            });
            // finished assigning data to the components of videoCardView

            return videoCardView;
        }
    }

    /**
     * Displays a confirmation AlertDialog to confirm if the user really wants to delete the video.
     * If the user confirms, the parameter <code>videoId</code> is passed to the method
     * <code>deleteVideoFromFirebase(String videoId)</code> which handles deletion from Firebase
     *
     * @param videoId the hashcode generated by Firebase for this Video
     */
    private void buttonDeleteOnClick(final String videoId, final int position) {

        // AlertDialog for confirmation of delete
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setMessage("Are you sure you want to delete this video?");
        builder.setTitle("Delete Video");
        builder.setCancelable(true);

        builder.setPositiveButton("YES", (dialog, id) -> {
            // delete video from the local videoList
            videoList.remove(position);
            adapter.notifyDataSetChanged();
            deleteVideoFromFirebase(videoId);
        });
        builder.setNegativeButton("NO", (dialog, id) -> {
            // do nothing, the AlertDialog closes automatically
        });

        AlertDialog dialog = builder.create();
        dialog.show();
    }

    /**
     * This class contains the details of the videos that are displayed in the DeleteVideoActivity.
     * It is used by the RecyclerView to load, list and remove items.
     *
     * @author Shayak Banerjee
     * @version 0.1
     * @since 3rd June 2019
     */
    public class Video {
        private String title;
        private String link;
        private String id;

        /**
         * Creates a new object of type Video. <br>
         * Usage:-<br>
         * <code>Video video = new Video("Swarm of Bees", "http://www.example.com/vjad8D", "8jadf32l")</code><br>
         * <br><br>
         * The recycler view will work with an ArrayList of type Video<br>
         *
         * @param title title of the Video
         * @param link  url of the Video
         * @param id    Firebase generated hashcode
         */
        public Video(String title, String link, String id) {
            this.title = title;
            this.link = link;
            this.id = id;
        }

        /**
         * @return video title
         */
        public String getTitle() {
            return this.title;
        }

        /**
         * @return thumbnail url
         */
        public String getLink() {
            return this.link;
        }

        /**
         * @return Firebase generated hashcode
         */
        public String getId() {
            return this.id;
        }

        /**
         * @param title set the video title (only for testing purposes)
         */
        public void setTitle(String title) {
            this.title = title;
        }

        /**
         * @param id set the video id (only for testing purposes)
         */
        public void setId(String id) {
            this.id = id;
        }

        /**
         * @param link set the thumbnail url (only for testing purposes)
         */
        public void setLink(String link) {
            this.link = link;
        }
    }

    /**
     * Deletes the video from firebase having corresponding Id (compared with videoId)
     *
     * @param videoId A hashcode generated by firebase, which is used to refer to the video
     */
    private void deleteVideoFromFirebase(@NonNull String videoId) {
        databaseReference.child(videoId).removeValue();
    }

    /**
     * Fetches data from Firebase and populates the videoList which is then displayed in this activity
     */
    public void populateVideoList() {
        databaseReference.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot ds) {

                for (DataSnapshot dataSnapshot : ds.getChildren()) {
                    String title = dataSnapshot.child("title").getValue().toString();
                    String thumbnailLink = dataSnapshot.child("thumbnailLink").getValue().toString();
                    String videoId = dataSnapshot.child("videoId").getValue().toString();


                    videoList.add(new Video(title, thumbnailLink, videoId));
                    adapter.notifyDataSetChanged();

                    Log.d("TAG", title);


                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {
                // do nothing
            }
        });
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_add_delete_activity, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {

        if(item.getItemId() == R.id.menuItemLogout){
            mAuth.signOut();
            finish();
            return true;
        }

        return super.onOptionsItemSelected(item);
    }
}
